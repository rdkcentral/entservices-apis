{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/rdkservices/main/Tools/json_generator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "Warehouse API", 
        "class": "Warehouse",
        "description": "The `Warehouse` plugin performs various types of resets (data, warehouse, etc.)."
    },
    "common": {
        "$ref": "../common/common.json"
    },
    "definitions": {
        "error":{
            "summary": "An error message in case of a failure",
            "type": "string",
            "example": ""
        }
    },
    "methods":{
        "executeHardwareTest": {
            "summary": "Starts a hardware test on the device. See `getHardwareTestResults`.",
            "result": {
                "$ref": "#/common/result"
            }
        },
        "getHardwareTestResults": {
            "summary": "Returns the results of the last hardware test.",
            "params": {
                "type":"object",
                "properties": {
                    "testResults": {
                        "summary": "The test results",
                        "type": "string",
                        "example": "Timezone: NA 2021-04-15 10:35:06 Test execution start, remote trigger ver. 0011 2021-04-15 10:35:10 Test result: Audio/Video Decoder:PASSED 2021-04-15 10:35:06 Test result: Dynamic RAM:PASSED 2021-04-15 10:35:06 Test result: Flash Memory:PASSED 2021-04-15 10:35:06 Test result: HDMI Output:PASSED 2021-04-15 10:35:38 Test result: IR Remote Interface:WARNING_IR_Not_Detected 2021-04-15 10:35:06 Test result: Bluetooth:PASSED 2021-04-15 10:35:06 Test result: SD Card:PASSED 2021-04-15 10:35:06 Test result: WAN:PASSED 2021-04-15 10:35:38 Test execution completed:PASSED"
                    }
                },
                "required": [
                    "testResults"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }

        },
        "internalReset":{
            "summary": "Invokes the internal reset script, which reboots the Warehouse service (`/rebootNow.sh -s WarehouseService &`). Note that this method checks the `/version.txt` file for the image name and fails to run if the STB image version is marked as production (`PROD`).",
            "params": {
                "type":"object",
                "properties": {
                    "passPhrase": {
                        "summary": "The passphrase for running the internal reset (`FOR TEST PURPOSES ONLY`)",
                        "type": "string",
                        "example": "FOR TEST PURPOSES ONLY"
                    }
                },
                "required": [
                    "passPhrase"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    },
                    "error": {
                        "$ref": "#/definitions/error"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "isClean":{
            "summary": "Checks the locations on the device where customer data may be stored. If there are contents contained in those folders, then the device is not clean.",
            "params": {
                "type":"object",
                "properties": {
                    "age": {
                        "summary": "Ignore files/folders for the isClean checkup that were created/updated within the last age (in seconds) when this API is called",
                        "type": "integer",
                        "example": "300"
                    }
                },
                "required": []
            },
            "result": {
                "type": "object",
                "properties": {
                    "clean":{
                        "summary": "If `true`, then the device has no customer data, otherwise `false`",
                        "type": "boolean",
                        "example": false                    
                    },
                    "files": {
                        "summary": "A string [] of file locations for each file that is found that should have been deleted in the cleaning process. If the `clean` property is `true`, then this array is empty or `null`.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "/opt/ctrlm.sql"
                        }
                    },
                    "success":{
                        "$ref": "#/common/success"
                    },
                    "error":{
                        "$ref": "#/definitions/error"
                    }
                },
                "required": [
                    "clean",
                    "files",
                    "success",
                    "error"
                ]
            }
        },
        "lightReset":{
            "summary": "Resets the application data.",
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    },
                    "error": {
                        "$ref": "#/definitions/error"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "resetDevice":{
            "summary": "Resets the STB to the warehouse state.",
            "events": {
                "resetDone" : "Triggers when the device reset is finished indicating a successful reset or failure"
            },
            "params": {
                "type":"object",
                "properties": {
                    "suppressReboot": {
                        "summary": "if `true`, the STB should not be rebooted, otherwise `false`. Only the `WAREHOUSE` reset type supports suppressing the reboot",
                        "type": "boolean",
                        "example": true
                    },
                    "resetType": {
                        "summary": "The reset type. If `resetType` is not specified, then `WAREHOUSE` is the default.",
                        "enum": [
                            "WAREHOUSE",
                            "FACTORY",
                            "USERFACTORY",
                            "COLDFACTORY"
                        ],
                        "default": "WAREHOUSE",
                        "type": "string",
                        "example": "WAREHOUSE"
                    }
                },
                "required": [
                    "suppressReboot",
                    "resetType"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    },
                    "error": {
                        "$ref": "#/definitions/error"
                    }
                },
                "required": [
                    "success"
                ]
            } 
        }
    },
    "events":{
        "resetDone":{
            "summary": "Notifies subscribers about the status of the warehouse reset operation",
            "params": {
                "type" :"object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    },
                    "error": {
                        "$ref": "#/definitions/error"
                    }
                },
                "required": [
                    "success"
                ]
            }
        }
    }
}
