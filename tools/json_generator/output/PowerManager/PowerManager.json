{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/entservices-apis/refs/heads/main/tools/md_generator/json2md/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "PowerManager API",
        "class": "org.rdk.PowerManager",
        "description": "The `PowerManager` plugin is used to manage power manager settings."
    },
    "common": {
        "$ref": "../common/common.json"
    },
    "definitions": {
        "temperature": {
            "summary": "The temperature",
            "type": "float",
            "example": 48.000000
        },
        "deep_sleep_timeout": {
            "summary": "The deep sleep timeout in seconds",
            "type": "integer",
            "example": 3
        },
        "reason": {
            "summary": "The reboot reason",
            "type": "string",
            "example": "FIRMWARE_FAILURE"
        },
        "standbyMode": {
            "summary": "Whether `WakeOnLAN` and `WakeOnWLAN` is enabled (`true`); otherwise, `false`",
            "type": "boolean",
            "example": false
        },
        "source": {
            "summary": "The source of the reboot",
            "type": "string",
            "example": "SystemPlugin"
        },
        "wakeupSources": {
            "summary": "Array of Key value pair with wake up sources and its configurations",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "WAKEUPSRC_VOICE": {
                        "description": "Voice Wake up",
                        "type":"boolean",
                        "example": true
                    },
                        "WAKEUPSRC_PRESENCE_DETECTION": {
                        "description": "Presense detection wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_BLUETOOTH": {
                        "description": "Bluetooth Wakeup",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_WIFI": {
                        "description": "WiFi Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_IR": {
                        "description": "IR Remote Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_POWER_KEY": {
                        "description": "Power Button Wake up - GPIO",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_CEC": {
                        "description": "HDMI CEC commadn Wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_LAN": {
                        "description": "LAN wake up",
                        "type":"boolean",
                        "example": true
                    },
                    "WAKEUPSRC_TIMER": {
                        "description": "TImer Wake up",
                        "type":"boolean",
                        "example": true
                    }
                }
            }
        },
        "powerState": {
            "summary": "The power state",
            "enum": [
                "OFF",
                "STANDBY",
                "ON",
                "LIGHT_SLEEP",
                "DEEP_SLEEP"
            ],
            "type": "integer",
            "example": 2
        },
        "currentMode": {
            "summary": "Indicates the current operating mode of the STB",
            "enum": [
                "UNKNOWN",
                "NORMAL",
                "EAS",
                "WAREHOUSE"
            ],
            "type": "integer",
            "example": 2
        },
        "newMode": {
            "summary": "Sets the desired operating mode for the STB",
            "enum": [
                "UNKNOWN",
                "NORMAL",
                "EAS",
                "WAREHOUSE"
            ],
            "type": "integer",
            "example": 1
        },
        "high": {
            "summary": "The warning threshold",
            "type": "float",
            "example": 100.000000
        },
        "critical": {
            "summary": "The max temperature threshold",
            "type": "float",
            "example": 110.000000
        }
    },
    "methods": {
        "getOvertempGraceInterval": {
            "summary": "Returns the over-temperature grace interval value. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "graceInterval": {
                        "type": "integer",
                        "example": 60
                    }
                },
                "required": [
                    "graceInterval"
                ]
            }
        },
        "getPowerState":{
            "summary": "Returns the current power state of the device. The power state (must be one of the following: *OFF*, *STANDBY*, *ON*, *LIGHT_SLEEP*, *DEEP_SLEEP*)",
            "result": {
                "type": "object",
                "properties": {
                    "currentState": {
                        "summary": "The current power state",
                        "type": "string",
                        "example": "STANDBY"
                    },
                    "newState": {
                        "summary": "The new power state",
                        "type": "string",
                        "example": "ON"
                    }
                },
                "required": [
                    "currentState",
                    "newState"
                ]
            }
        },
        "getThermalState":{
            "summary": "Returns temperature threshold values. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "currentTemperature": {
                        "summary": "The temperature",
                        "type": "float",
                        "example": 48.000000
                    }
                },
                "required": [
                    "temperature"
                ]
            }
        },
        "getTemperatureThresholds":{
            "summary": "Returns temperature threshold values. Not supported on all devices.",
            "result": {
                "type": "object",
                "properties": {
                    "high": {
                        "$ref": "#/definitions/high"
                    },
                    "critical": {
                        "$ref": "#/definitions/critical"
                    }
                },
                "required": [
                    "high",
                    "critical"
                ]
            }
        },
        "setOvertempGraceInterval":{
            "summary": "Sets the over-temperature grace interval value. Not supported on all devices.",
            "params": {
                "type": "object",
                "properties": {
                    "graceInterval": {
                        "type": "integer",
                        "example": 60
                    }
                },
                "required": [
                    "graceInterval"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "setPowerState":{
            "summary": "Sets the power state of the device.",
            "events": {
                "onPowerModeChanged" : "Triggers when the system power state changes. The power state (must be one of the following: *OFF*, *STANDBY*, *ON*, *LIGHT_SLEEP*, *DEEP_SLEEP*)"
            },
            "params": {
                "type":"object",
                "properties": {
                    "keyCode": {
                        "summary": "power state changed keycode",
                        "type": "integer",
                        "example": 30
                    },
                    "powerState": {
                        "summary": "Set the new power state",
                        "type": "string",
                        "example": "ON"
                    },
                    "standbyReason": {
                        "summary": "The reason for a standby state",
                        "type": "string",
                        "example": "APIUnitTest"
                    }
                },
                "required": [
                    "powerState",
                    "standbyReason"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "setDeepSleepTimer": {
            "summary": "Sets the deep sleep timeout period.",
            "params": {
                "type":"object",
                "properties": {
                    "timeOut": {
                        "$ref": "#/definitions/deep_sleep_timeout"
                    }
                },
                "required": [
                    "deep_sleep_timeout"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "getLastWakeupReason":{
            "summary": "Returns the reason for the device coming out of deep sleep.",
            "result": {
                "type": "object",
                "properties": {
                    "wakeupReason": {
                        "summary": "The reason",
                        "enum": [
                            "WAKEUP_REASON_IR",
                            "WAKEUP_REASON_RCU_BT",
                            "WAKEUP_REASON_RCU_RF4CE",
                            "WAKEUP_REASON_GPIO",
                            "WAKEUP_REASON_LAN",
                            "WAKEUP_REASON_WLAN",
                            "WAKEUP_REASON_TIMER",
                            "WAKEUP_REASON_FRONT_PANEL",
                            "WAKEUP_REASON_WATCHDOG",
                            "WAKEUP_REASON_SOFTWARE_RESET",
                            "WAKEUP_REASON_THERMAL_RESET",
                            "WAKEUP_REASON_WARM_RESET",
                            "WAKEUP_REASON_COLDBOOT",
                            "WAKEUP_REASON_STR_AUTH_FAILURE",
                            "WAKEUP_REASON_CEC",
                            "WAKEUP_REASON_PRESENCE",
                            "WAKEUP_REASON_VOICE",
                            "WAKEUP_REASON_UNKNOWN"
                        ],
                        "type": "integer",
                        "example": 7
                    }
                },
                "required": [
                    "wakeupReason"
                ]
            }
        },
        "getLastWakeupKeyCode":{
            "summary": "Returns the last wakeup keycode.",
            "result": {
                "type": "object",
                "properties": {
                    "wakeupKeyCode": {
                        "summary": "The last wakeup keycode",
                        "type": "integer",
                        "example": 59
                    }
                },
                "required": [
                    "wakeupKeyCode"
                ]
            }
        },
        "reboot":{
            "summary": "Requests that the system performs a reboot of the set-top box.",
            "events": {
                "onRebootBegin" : "Triggers when a device reboot request is made"
            },
            "params": {
                "type":"object",
                "properties": {
                    "rebootRequestor": {
                        "summary": "Reboot requiested module",
                        "type": "string",
                        "example": "SystemServicesPlugin"
                    },
                    "rebootReasonCustom": {
                        "$ref": "#/definitions/reason"
                    },
                    "rebootReasonOther": {
                        "$ref": "#/definitions/reason"
                    }
                },
                "required": [
                    "rebootReason"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "IARM_Bus_Call_STATUS": {
                        "summary": "IARM BUS status",
                        "type": "integer",
                        "example": 0
                    }
                },
                "required": [
                    "IARM_Bus_Call_STATUS"
                ]
            }
        },
        "getNetworkStandbyMode": {
            "summary": "Returns the network standby mode of the device. If network standby is `true`, the device supports `WakeOnLAN` and `WakeOnWLAN` actions in STR mode.",
            "result": {
                "type": "object",
                "properties": {
                    "standbyMode": {
                        "$ref": "#/definitions/standbyMode"
                    }
                },
                "required": [
                    "standbyMode"
                ]
            }
        },
        "setNetworkStandbyMode":{
            "summary": "This API will be deprecated in the future. Please refer setWakeupSrcConfiguration to Migrate. This API Enables or disables the network standby mode of the device. If network standby is enabled, the device supports `WakeOnLAN` and `WakeOnWLAN` actions in STR mode.",
            "params": {
                "type":"object",
                "properties": {
                    "standbyMode": {
                        "$ref": "#/definitions/standbyMode"
                    }
                },
                "required": [
                    "standbyMode"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "setWakeupSrcConfig":{
            "summary": "Sets the wakeup source configuration for the input powerState. if you are using setNetworkStandbyMode API, Please do not use this API to set LAN and WIFI wakeup. Please migrate to setWakeupSrcConfiguration API to control all wakeup source settings. This API does not persist. Please call this API on Every bootup to set the values.",
            "params": {
                "type": "object",
                "properties": {
                    "powerState": {
                        "summary": "Enum indicating bit position, If the reason is STANDBY, the value is 4(bit counting starts at 1)",
                        "enum": [
                            "OFF",
                            "STANDBY",
                            "ON",
                            "LIGHT_SLEEP",
                            "DEEP_SLEEP"
                        ],
                        "type": "integer",
                        "example": 4
                    },
                    "wakeupSources": {
                        "summary": "Enum indicating bit position, If the reason is LAN, the value is 32(bit counting starts at 1)",
                        "enum": [
                            "WAKEUP_REASON_IR",
                            "WAKEUP_REASON_RCU_BT",
                            "WAKEUP_REASON_RCU_RF4CE",
                            "WAKEUP_REASON_GPIO",
                            "WAKEUP_REASON_LAN",
                            "WAKEUP_REASON_WLAN",
                            "WAKEUP_REASON_TIMER",
                            "WAKEUP_REASON_FRONT_PANEL",
                            "WAKEUP_REASON_WATCHDOG",
                            "WAKEUP_REASON_SOFTWARE_RESET",
                            "WAKEUP_REASON_THERMAL_RESET",
                            "WAKEUP_REASON_WARM_RESET",
                            "WAKEUP_REASON_COLDBOOT",
                            "WAKEUP_REASON_STR_AUTH_FAILURE",
                            "WAKEUP_REASON_CEC",
                            "WAKEUP_REASON_PRESENCE",
                            "WAKEUP_REASON_VOICE",
                            "WAKEUP_REASON_UNKNOWN"
                        ],
                        "type": "integer",
                        "example": 6
                    }
                },
                "required": [
                    "wakeupSources"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "getWakeupSrcConfig":{
            "summary": "Returns all the supported wakeup configurations and powerState",
            "result": {
                "type": "object",
                "properties": {
                    "powerState": {
                        "summary": "Enum indicating bit position, If the reason is STANDBY, the value is 4(bit counting starts at 1)",
                        "enum": [
                            "OFF",
                            "STANDBY",
                            "ON",
                            "LIGHT_SLEEP",
                            "DEEP_SLEEP"
                        ],
                        "type": "integer",
                        "example": 4
                    },
                    "wakeupSources": {
                        "summary": "Enum indicating bit position, If the reason is LAN, the value is 32(bit counting starts at 1)",
                        "enum": [
                            "WAKEUP_REASON_IR",
                            "WAKEUP_REASON_RCU_BT",
                            "WAKEUP_REASON_RCU_RF4CE",
                            "WAKEUP_REASON_GPIO",
                            "WAKEUP_REASON_LAN",
                            "WAKEUP_REASON_WLAN",
                            "WAKEUP_REASON_TIMER",
                            "WAKEUP_REASON_FRONT_PANEL",
                            "WAKEUP_REASON_WATCHDOG",
                            "WAKEUP_REASON_SOFTWARE_RESET",
                            "WAKEUP_REASON_THERMAL_RESET",
                            "WAKEUP_REASON_WARM_RESET",
                            "WAKEUP_REASON_COLDBOOT",
                            "WAKEUP_REASON_STR_AUTH_FAILURE",
                            "WAKEUP_REASON_CEC",
                            "WAKEUP_REASON_PRESENCE",
                            "WAKEUP_REASON_VOICE",
                            "WAKEUP_REASON_UNKNOWN"
                        ],
                        "type": "integer",
                        "example": 6
                    }
                },
                "required": [
                    "powerState",
                    "wakeupSources"
                ]
            }
        },
        "setSystemMode":{
            "summary": "Sets the mode of the set-top box for a specific duration before returning to normal mode. Valid modes are:  \n* `NORMAL` - The set-top box is operating in normal mode.  \n* `EAS` - The set-top box is operating in Emergency Alert System (EAS) mode. This mode is set when the device needs to perform certain tasks when entering EAS mode, such as setting the clock display or preventing the user from using the diagnostics menu.  \n* `WAREHOUSE` - The set-top box is operating in warehouse mode.",
            "params": {
                "type":"object",
                "properties": {
                    "currentMode": {
                        "$ref": "#/definitions/currentMode"
                    },
                    "newMode": {
                        "$ref": "#/definitions/newMode"
                    }
                },
                "required": [
                    "currentMode",
                    "newMode"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        },
        "getPowerStateBeforeReboot":{
            "summary": "Returns the power state before reboot.",
            "result": {
                "type": "object",
                "properties": {
                    "powerStateBeforeReboot": {
                        "summary": "The power state",
                        "type": "string",
                        "example": "ON"
                    }
                },
                "required": [
                    "state"
                ]
            }
        },
        "setTemperatureThresholds":{
            "summary": "Sets the temperature threshold values. Not supported on all devices.",
            "params": {
                "type":"object",
                "properties": {
                    "high": {
                        "$ref": "#/definitions/high"
                    },
                    "critical": {
                        "$ref": "#/definitions/critical"
                    }
                },
                "required": [
                    "high",
                    "critical"
                ]
            },
            "result": {
                "summary": "On success null will be returned",
                "type": "string",
                "example": "null"
            },
            "errors": [
                {
                    "description": "General error",
                    "$ref": "#/common/errors/general"
                }
            ]
        }
    },
    "events": {
        "onRebootBegin":{
            "summary": "Triggered when an application invokes the reboot method",
            "params": {
                "type" :"object",
                "properties": {
                    "requestedApp": {
                        "$ref": "#/definitions/source"
                    },
                    "rebootReason": {
                        "$ref": "#/definitions/reason"
                    }
                },
                "required": [
                    "requestedApp",
                    "rebootReason"
                ]
            }
        },
        "onPowerModeChanged":{
            "summary": "Triggered when the power manager detects a device power state change. The power state (must be one of the following: *OFF*, *STANDBY*, *ON*, *LIGHT_SLEEP*, *DEEP_SLEEP*)",
            "params": {
                "type" :"object",
                "properties": {
                    "currentState": {
                        "summary": "The current power state",
                        "type": "string",
                        "example": "STANDBY"
                    },
                    "newState": {
                        "summary": "The new power state",
                        "type": "string",
                        "example": "ON"
                    }
                },
                "required": [
                    "currentState",
                    "newState"
                ]
            }
        },
        "onPowerModePreChange":{
            "summary": "Triggered before change then device power state. The power state (must be one of the following: *OFF*, *STANDBY*, *ON*, *LIGHT_SLEEP*, *DEEP_SLEEP*)",
            "params": {
                "type" :"object",
                "properties": {
                    "currentState": {
                        "summary": "The current power state",
                        "type": "string",
                        "example": "STANDBY"
                    },
                    "newState": {
                        "summary": "The new power state",
                        "type": "string",
                        "example": "ON"
                    }
                },
                "required": [
                    "powerState",
                    "currentState"
                ]
            }
        },
        "onDeepSleepTimeout":{
            "summary": "Triggered when the power manager detects a device power state change to light sleep from deep sleep",
            "params": {
                "type" :"object",
                "properties": {
                    "wakeupTimeout": {
                        "summary": "Timeout in seconds, to wakeup from deep sleep",
                        "type": "integer",
                        "example": 30
                    }
                },
                "required": [
                    "powerState",
                    "currentState"
                ]
            }
        },
        "onNetworkStandbyModeChanged":{
            "summary": "Triggered when the network standby mode setting changes",
            "params": {
                "type" :"object",
                "properties": {
                    "enabled": {
                        "summary": "Network standby mode",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "enabled"
                ]
            }
        },
        "onThermalModeChanged":{
            "summary": "Triggered when the device temperature changes beyond the `WARN` or `MAX` limits (see `setTemperatureThresholds`). Not supported on all devices.",
            "params": {
                "type" :"object",
                "properties": {
                    "currentThermalLevel": {
                        "summary": "The exceeded threshold",
                        "string": [
                            "NORMAL",
                            "HIGH",
                            "CRITICAL"
                        ],
                        "type": "string",
                        "example": "HIGH"
                    },
                    "newThermalLevel": {
                        "summary": "The exceeded threshold",
                        "string": [
                            "NORMAL",
                            "HIGH",
                            "CRITICAL"
                        ],
                        "type": "string",
                        "example": "NORMAL"
                    },
                    "currentTemperature":{
                        "$ref": "#/definitions/temperature"
                    }
                },
                "required": [
                    "thresholdType",
                    "exceeded",
                    "temperature"
                ]
            }
        }
    }
}
