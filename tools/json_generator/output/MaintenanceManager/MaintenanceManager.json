{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/rdkservices/main/Tools/json_generator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "MaintenanceManagerPlugin", 
        "class": "MaintenanceManager", 
        "description": "The `MaintenanceManager` plugin allows you to control and monitor maintenance activities on set-top devices."
    },
    "common": {
        "$ref": "../common/common.json"
    },
    "definitions": {
        "maintenanceStatus": {
            "summary": "The current maintenance status",
            "type": "string",
            "example": "MAINTENANCE_STARTED"
        },
        "optOut":{
            "summary": "The opt-out mode. See [setMaintenanceMode](#method.setMaintenanceMode) for a description of each opt-out mode",
            "enum": [
                "NONE",
                "ENFORCE_OPTOUT",
                "BYPASS_OPTOUT",
                "IGNORE_UPDATE"
            ],
            "default": "NONE",
            "type": "string",
            "example": "ENFORCE_OPTOUT"
        }
    },
    "methods": {
        "getMaintenanceActivityStatus" :{
            "summary": "Gets the maintenance activity status details.  \n**Maintenance Status**  \n* `MAINTENANCE_IDLE` - Maintenance service is not executing any activities before the start of first maintenance task  \n* `MAINTENANCE_STARTED` - Maintenance has started either by schedule or on boot  \n* `MAINTENANCE_ERROR` - One or more tasks of the maintenance service has failed  \n* `MAINTENANCE_COMPLETE` - All critical maintenance tasks are completed successfully  \n* `MAINTENANCE_INCOMPLETE` - Maintenance service didn't execute one or more of the tasks.",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceStatus":{
                        "$ref": "#/definitions/maintenanceStatus" 
                    },
                    "LastSuccessfulCompletionTime":{
                        "summary": "The time (in epoch time) the last maintenance completed or `0` if not applicable",
                        "type": "integer",
                        "example": 12345678
                    },
                    "isCriticalMaintenance":{
                        "summary": "`true` if the maintenance activity cannot be aborted, otherwise `false`",
                        "type": "boolean",
                        "example": true
                    },
                    "isRebootPending": {
                        "summary": "`true` if the device is going to reboot, otherwise `false`",
                        "type": "boolean",
                        "example": false
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "maintenanceStatus",
                    "LastSuccessfulCompletionTime",
                    "isCriticalMaintenance",
                    "isRebootPending",
                    "success"
                ]
            }
        },
        "getMaintenanceStartTime":{
            "summary": "Gets the scheduled maintenance start time.",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceStartTime": {
                        "summary": "The start time (in epoch time)",
                        "type": "integer",
                        "example": 12345678
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "maintenanceStartTime",
                    "success"
                ]
            }
        },
        "setMaintenanceMode":{
            "summary": "Sets the maintenance mode and software upgrade opt-out mode.  \n*Opt-Out Modes*  \n* `NONE` - The software upgrade process is unaffected and proceeds with the download and update.  \n* `ENFORCE_OPTPOUT` - The software upgrade process pauses after discovering an update is available and sends a `System` service `onFirmwareUpdateStateChange` event with the `On Hold for opt-out` state. An application must give the user the option of whether or not to accept the update. If the user accepts the update, then the opt-out mode must be set to `BYPASS-OPTOUT`.  \n* `BYPASS_OPTOUT` The software upgrade process proceeds with a download and update, as directed by the application, for this occurrence of the maintenance window (used when the user accepts the software update).  \n* `IGNORE-UPDATE` -  The software upgrade process ignores any non-mandatory firmware updates, and will NOT send any notification. Note that in this mode, the software upgrade process still sets `ENFORCE-OPTOUT` if the update is mandatory. Use the `getFirmwareUpdateInfo` method from the `System` service to determine what software version is available for download and to determine if the update is consider mandatory (using the `rebootImmediately` parameter).",
            "params": {
                "type":"object",
                "properties": {
                    "maintenanceMode":{
                        "summary": "The maintenance mode. The `FOREGROUND` mode runs all maintenance tasks. The `BACKGROUND` mode aborts activities currently running, if the task can't run in the background (if maintenance was already started with FOREGROUND mode) and executes tasks without impacting the user experience, if it is set before calling startMaintenance.",
                        "enum": [
                            "FOREGROUND",
                            "BACKGROUND"
                        ],
                        "type": "string",
                        "example": "BACKGROUND"
                    },
                    "optOut":{
                        "summary": "The opt-out mode. ",
                        "enum": [
                            "NONE",
                            "ENFORCE_OPTOUT",
                            "BYPASS_OPTOUT",
                            "IGNORE_UPDATE"
                        ],
                        "default": "NONE",
                        "type": "string",
                        "example": "ENFORCE_OPTOUT"
                    }
                },
                "required": [
                    "maintenanceMode",
                    "optOut"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "startMaintenance":{
            "summary": "Starts maintenance activities.",
            "events": {
                "onMaintenanceStatusChange" : "Triggers whenever the maintenance status changes"
            },
            "result": {
                "$ref": "#/common/result"
            }          
        },
        "stopMaintenance":{
            "summary": "Stops maintenance activities.",
            "events": {
                "onMaintenanceStatusChange" : "Triggers whenever the maintenance status changes"
            },
            "result": {
                "$ref": "#/common/result"
            }          
        },
        "getMaintenanceMode":{
            "summary": "Gets the current maintenance mode and software upgrade opt-out mode which are stored in the persistent location.",
            "result": {
                "type": "object",
                "properties": {
                    "maintenanceMode":{
                        "summary": "The maintenance mode. The `FOREGROUND` mode runs all maintenance tasks. The `BACKGROUND` mode aborts activities currently running, if the task can't run in the background (if maintenance was already started with FOREGROUND mode) and executes tasks without impacting the user experience, if it is set before calling startMaintenance.",
                        "enum": [
                            "FOREGROUND",
                            "BACKGROUND"
                        ],
                        "type": "string",
                        "example": "BACKGROUND"
                    },
                    "optOut":{
                        "$ref": "#/definitions/optOut"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "maintenanceMode",
                    "optOut",
                    "success"
                ]
            }
        }
    },
    "events": {
        "onMaintenanceStatusChange":{
            "summary": "Triggered when the maintenance manager status changes. See `getMaintenanceActivityStatus` for a list of statuses.",
            "params": {
                "type": "object",
                "properties": {
                    "maintenanceStatus":{
                        "$ref": "#/definitions/maintenanceStatus" 
                    }
                },
                "required": [
                    "maintenanceStatus"
                ]
            }
        }
    }
}